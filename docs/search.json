[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/graphs/index.html#after-generation-0",
    "href": "posts/graphs/index.html#after-generation-0",
    "title": "Potential Data Visualizations",
    "section": "After Generation 0",
    "text": "After Generation 0\n\nTrait HistogramsScatterplots\n\n\n\n\n                                                \n\n\n\nWhat is the correct name for this type of graph?\n\nA. Scatterplot\nB. Histogram\nC. Regression Line\nD. Time Series\n\n\n\n\nClick to see the answer\n\nAnswer: B. Histogram\nExplanation: A Histogram is a special type of bar chart that shows the frequency distribution of another variable.\n\n\nWhat is your best estimate of the range of the data for Speed?\n\nA. 1.0 to 5.5\nB. 1.0 to 5.0\nC. 0.0 to 12.0\nD. 0.0 to 109.0\n\n\n\n\nClick to see the answer\n\nAnswer: A. 1.0 to 5.5\nExplanation: Values of Speed are shown on the x axis, and the range is defined as the lowest and highest value of the variable. The lowest value of Speed is in the 1.0 bin, and the highest value is in the 5.5 bin.\n\n\nWhat bin contains the Mode of the distribution for Speed?\n\nA. 1.0 to 1.5\nB. 109 Slimes\nC. 2.0 to 2.5\nD. 6.0 to 6.5\n\n\n\n\nClick to see the answer\n\nAnswer: C. 2.0 to 2.5\nExplanation: The Mode of a distribution is its most frequently observed value. In this case, the 2.0 to 2.5 bin contains the most slimes.\n\n\n\n\n\n                                                \n\n\nNumber of observations with Wave Number 0: 300\nCorrelation between Speed Trait and Tower Attraction Trait:\n                        Speed Trait  Tower Attraction Trait\nSpeed Trait                1.000000                0.044419\nTower Attraction Trait     0.044419                1.000000\n\n\n\nWhat type of relationship appears to exist between Speed Trait and Tower Attraction Trait?\n\nA. Strong positive correlation\nB. Strong negative correlation\nC. Weak positive correlation\nD. No clear correlation\n\n\nClick to see the answer\n\nAnswer: D. No clear correlation Explanation: The scatterplot shows no clear pattern or trend between Speed Trait and Tower Attraction Trait, indicating no clear correlation between these variables.\n\n\nWhat is the approximate range of values for the Tower Attraction Trait?\n\nA. 0 to 6\nB. 0 to 12\nC. -6 to 6\nD. -12 to 12\n\n\nClick to see the answer\n\nAnswer: C. -6 to 6 Explanation: The y-axis of the scatterplot, which represents the Tower Attraction Trait, appears to range from approximately -6 to 6.\n\n\nOn this graph, what does each individual point (circle) represent?\n\nA. The maximum value of [Trait 1] and [Trait 2] from all previous Generations of slimes.\nB. The average values of the Traits for each slime from Generation X.\nC. The exact values of [Trait 1] and [Trait 2] for each slime from Generation X.\nD. The probability that each Slime will reproduce this generation.\n\n\nClick to see the answer\n\nAnswer: C. The exact values of [Trait 1] and [Trait 2] for each slime from Generation X. Explanation: This is a scatter plot of trait values from the previous generation. A scatterplot plots exact values for two quantitative variables (Traits) on two orthogonal axes."
  },
  {
    "objectID": "posts/graphs/index.html#after-generation-3",
    "href": "posts/graphs/index.html#after-generation-3",
    "title": "Potential Data Visualizations",
    "section": "After Generation 3",
    "text": "After Generation 3\n\nType chartsFitness Charts\n\n\n\n\n                                                \n\n\nWe should totally do a bargraph race at the end of the game! Plus other animated graphs!\n\nWhat is the correct name for this type of graph?\n\nA. Scatterplot\nB. Bar Chart\nC. Regression Line\nD. Time Series\n\n\n\n\nClick to see the answer\n\nAnswer: B. Bar Chart\nExplanation: A Bar Chart is used to represent a quantitative variable (the height of the bar) for a set of discrete groups (arranged on the x axis).\n\n\nWhat is your best estimate of the number of Blaster type slimes?\n\nA. 11\nB. 1\nC. 0 to 300\nD. 46\n\n\n\n\nClick to see the answer\n\nAnswer: A. 11\nExplanation: The number of slimes for each type is represented by the height of each bar. Try hovering over the Blaster type bar to see its corresponding value for the y axis.\n\n\nWhat type of slime is the least frequent in the population?\n\nA. Blaster\nB. Basic\nC. Acid\nD. Fire\n\n\n\n\nClick to see the answer\n\nAnswer: D. Fire\nExplanation: The least frequent slime type is the represented by the bar with the lowest value. In this case, there are only XXX fire slimes, a number lower than all the other groups.\n\n\n\n\n\n                                                \n\n\n\nWhat type of relationship appears to exist between Fitness trait and number of Offspring?\n\nA. Strong positive correlation\nB. Strong negative correlation\nC. Weak positive correlation\nD. No clear correlation\n\n\nClick to see the answer\n\nAnswer: A. Strong positive correlation Explanation: The scatterplot shows a strong positive correlation between Fitness and offspring.\n\n\nWhat is the approximate range of values for the number of offspring?\n\nA. 0 to 6\nB. 0 to 12\nC. -6 to 6\nD. -12 to 12\n\n\nClick to see the answer\n\nAnswer: B. 0 to 12 Explanation: The y-axis of the scatterplot represents the number of offspring. The lowest point value is at zero and the highest is 12.\n\n\nOn this graph, what does each individual point (circle) represent?\n\nA. The maximum value of [Trait 1] and [Trait 2] from all previous Generations of slimes.\nB. The average values of the Traits for each slime from Generation X.\nC. The exact values of [Trait 1] and [Trait 2] for each slime from Generation X.\nD. The probability that each Slime will reproduce this generation.\n\n\nClick to see the answer\n\nAnswer: C. The exact values of [Trait 1] and [Trait 2] for each slime from Generation X. Explanation: This is a scatter plot of trait values from the previous generation. A scatterplot plots exact values for two quantitative variables (Traits) on two orthogonal axes."
  },
  {
    "objectID": "posts/porportional/index.html",
    "href": "posts/porportional/index.html",
    "title": "Does Proportional Tournament Selection Work?",
    "section": "",
    "text": "── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\nNew names:\nNew names:"
  },
  {
    "objectID": "posts/porportional/index.html#shep.herd-evolutionary-model-analysis",
    "href": "posts/porportional/index.html#shep.herd-evolutionary-model-analysis",
    "title": "Does Proportional Tournament Selection Work?",
    "section": "",
    "text": "── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\nNew names:\nNew names:"
  },
  {
    "objectID": "posts/porportional/index.html#visualize-basic-trait-patterns",
    "href": "posts/porportional/index.html#visualize-basic-trait-patterns",
    "title": "Does Proportional Tournament Selection Work?",
    "section": "Visualize Basic Trait Patterns",
    "text": "Visualize Basic Trait Patterns\n\n\n`summarise()` has grouped output by 'file', 'Wave.Number', 'tournament'. You\ncan override using the `.groups` argument.\n\n\n\nSpeedTurn RatePersonal SpaceTower Avoidance\n\n\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\nChange in the Turn.Rate.Trait value over time.\n\n\n\n\n\n\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\nChange in the Slime.Distance.Trait value over time.\n\n\n\n\n\n\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\nChange in the Tower.Distance.Trait value over time."
  },
  {
    "objectID": "posts/porportional/index.html#visualize-basic-type-patterns",
    "href": "posts/porportional/index.html#visualize-basic-type-patterns",
    "title": "Does Proportional Tournament Selection Work?",
    "section": "Visualize Basic Type Patterns",
    "text": "Visualize Basic Type Patterns\n\nMain Slime TypeSecondary Slime Type\n\n\n\n\n`summarise()` has grouped output by 'Wave.Number', 'Main.Type', 'file',\n'tournament'. You can override using the `.groups` argument.\n\n\n\n\n\nChange in the frequency of Main Type over time.\n\n\n\n\n\n\n\n\n`summarise()` has grouped output by 'Wave.Number', 'Secondary.Type', 'file',\n'tournament'. You can override using the `.groups` argument.\n\n\n\n\n\nChange in the frequency of Secondary Type over time."
  },
  {
    "objectID": "posts/porportional/index.html#fitness-analysis",
    "href": "posts/porportional/index.html#fitness-analysis",
    "title": "Does Proportional Tournament Selection Work?",
    "section": "Fitness Analysis",
    "text": "Fitness Analysis\n\nRaw FitnessLog Fitness\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfitness &lt;- ggplot(fit_ranked%&gt;% filter(Wave.Number &lt; max(Wave.Number)), aes(x = Sheep.Distance.Fitness, y = offspring_count))+ geom_point(aes(color = Speed.Trait))+ geom_smooth(method = “lm”)+ facet_grid(Wave.Number~file)\nggsave(fitness, file = “fitness.png”, height = 12, width =4)\nfitnessrank &lt;- ggplot(fit_ranked%&gt;% filter(Wave.Number &lt; max(Wave.Number)), aes(x = fitrank, y = offspring_count))+ geom_point(aes(color = Speed.Trait))+ geom_smooth(method = “lm”)+ facet_grid(Wave.Number~file)\nggsave(fitnessrank, file = “fitnessrank.png”, height = 12, width =4)\nspeed &lt;- ggplot(fit_ranked%&gt;% filter(Wave.Number &lt; max(Wave.Number)), aes(x = Speed.Trait, y = offspring_count))+ geom_point(aes(color = Main.Type))+ geom_smooth(method = “lm”)+ facet_grid(Wave.Number~file)\nggsave(speed, file = “speed.png”, height = 12, width =4)\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n\nWarning: The dot-dot notation (..density..) was deprecated in ggplot2 3.4.0. ℹ Please use after_stat(density) instead.\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\nstat_bin() using bins = 30. Pick better value with binwidth.\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stderr}\n\nstat_bin() using bins = 30. Pick better value with binwidth.\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-2.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stderr}\n\nstat_bin() using bins = 30. Pick better value with binwidth. ```\n:::\n\n\n\n\n\n\n\n:::\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/preliminary/index.html",
    "href": "posts/preliminary/index.html",
    "title": "Preliminary Testing August 9",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nsafe_read_csv &lt;- function(file) {\n  tryCatch(\n    list(result = read_csv(file, show_col_types = FALSE) %&gt;%\n           rename_with(~ str_replace_all(., \" \", \".\")),\n         error = NULL),\n    error = function(e) list(result = NULL, error = e)\n  )\n}\n\n# Read all CSV files and combine them into a single dataframe\nallfiles &lt;- list.files(pattern = \"*.csv\", full.names = TRUE) %&gt;%\n  map_df(function(file) {\n    result &lt;- safe_read_csv(file)\n    if (is.null(result$error)) {\n      # Extract characters 6 through 9 from the file name\n      layout_value &lt;- substr(basename(file), 4, 7)\n      tournament&lt;- substr(basename(file), 1, 3)\n      tower &lt;- substr(basename(file), 8,10)\n      \n      # Combine the data with file and layout columns\n      result$result %&gt;%\n        mutate(file = file, layout = layout_value,\n               tournament = tournament,\n               tower = tower)\n    } else {\n      warning(paste(\"Error reading file:\", file, \"\\n\", result$error))\n      return(NULL)\n    }\n  })\n\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\n• `` -&gt; `...24`\n\n# Check if allfiles is empty\nif (nrow(allfiles) == 0) {\n  stop(\"No data was successfully read from the CSV files.\")\n}\n\n# Process the combined dataframe\nallfiles &lt;- allfiles %&gt;%\n  mutate(\n    Wave.Number = as.numeric(Wave.Number),\n    Unique.Slime.ID = paste(Wave.Number, Slime.ID, sep = \".\"),\n    Unique.Parent.One = paste(Wave.Number - 1, Parent.One, sep = \".\"),\n    Unique.Parent.Two = paste(Wave.Number - 1, Parent.Two, sep = \".\")\n  ) %&gt;%\n  pivot_longer(\n    cols = c(Unique.Parent.One, Unique.Parent.Two),\n    names_to = \"parent_type\",\n    values_to = \"parent_id\"\n  ) %&gt;%\n  group_by(parent_id) %&gt;%\n  mutate(offspring_count = n()) %&gt;%\n  ungroup() %&gt;%\n  filter(parent_id != \"-1.N/A\") %&gt;%\n  select(-parent_type) %&gt;%\n  distinct()"
  },
  {
    "objectID": "posts/preliminary/index.html#shep.herd-evolutionary-model-analysis",
    "href": "posts/preliminary/index.html#shep.herd-evolutionary-model-analysis",
    "title": "Preliminary Testing August 9",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nsafe_read_csv &lt;- function(file) {\n  tryCatch(\n    list(result = read_csv(file, show_col_types = FALSE) %&gt;%\n           rename_with(~ str_replace_all(., \" \", \".\")),\n         error = NULL),\n    error = function(e) list(result = NULL, error = e)\n  )\n}\n\n# Read all CSV files and combine them into a single dataframe\nallfiles &lt;- list.files(pattern = \"*.csv\", full.names = TRUE) %&gt;%\n  map_df(function(file) {\n    result &lt;- safe_read_csv(file)\n    if (is.null(result$error)) {\n      # Extract characters 6 through 9 from the file name\n      layout_value &lt;- substr(basename(file), 4, 7)\n      tournament&lt;- substr(basename(file), 1, 3)\n      tower &lt;- substr(basename(file), 8,10)\n      \n      # Combine the data with file and layout columns\n      result$result %&gt;%\n        mutate(file = file, layout = layout_value,\n               tournament = tournament,\n               tower = tower)\n    } else {\n      warning(paste(\"Error reading file:\", file, \"\\n\", result$error))\n      return(NULL)\n    }\n  })\n\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\n• `` -&gt; `...24`\n\n# Check if allfiles is empty\nif (nrow(allfiles) == 0) {\n  stop(\"No data was successfully read from the CSV files.\")\n}\n\n# Process the combined dataframe\nallfiles &lt;- allfiles %&gt;%\n  mutate(\n    Wave.Number = as.numeric(Wave.Number),\n    Unique.Slime.ID = paste(Wave.Number, Slime.ID, sep = \".\"),\n    Unique.Parent.One = paste(Wave.Number - 1, Parent.One, sep = \".\"),\n    Unique.Parent.Two = paste(Wave.Number - 1, Parent.Two, sep = \".\")\n  ) %&gt;%\n  pivot_longer(\n    cols = c(Unique.Parent.One, Unique.Parent.Two),\n    names_to = \"parent_type\",\n    values_to = \"parent_id\"\n  ) %&gt;%\n  group_by(parent_id) %&gt;%\n  mutate(offspring_count = n()) %&gt;%\n  ungroup() %&gt;%\n  filter(parent_id != \"-1.N/A\") %&gt;%\n  select(-parent_type) %&gt;%\n  distinct()"
  },
  {
    "objectID": "posts/preliminary/index.html#visualize-basic-trait-patterns",
    "href": "posts/preliminary/index.html#visualize-basic-trait-patterns",
    "title": "Preliminary Testing August 9",
    "section": "Visualize Basic Trait Patterns",
    "text": "Visualize Basic Trait Patterns\n\nsumstats &lt;- allfiles %&gt;%\n  group_by(file, Wave.Number, tournament, tower)%&gt;%\n  summarise(meanSpeed = mean(Speed.Trait),\n            meanTower = mean(Tower.Attraction.Trait),\n            meanTurn = mean(Turn.Rate.Trait),\n            meanPersonal = mean(Slime.Optimal.Distance.Trait),\n            Main.Blaster = sum(Main.Type == \"Blaster\"),\n            Main.Ice = sum(Main.Type == \"Ice\"),\n            Sec.Blaster = sum(Secondary.Type == \"Blaster\"),\n            Sec.Ice = sum(Secondary.Type == \"Ice\"))%&gt;%\n  ungroup()\n\n`summarise()` has grouped output by 'file', 'Wave.Number', 'tournament'. You\ncan override using the `.groups` argument.\n\n\n\nSpeedTurn RatePersonal SpaceTower Avoidance\n\n\n\n#| fig-cap: \"Change in the Speed.Trait value over time.\"\nggplot(allfiles, aes(x= Wave.Number, y = Speed.Trait))+\n  geom_jitter(data = allfiles, aes(x=Wave.Number, y = Speed.Trait),\n              alpha = 0.1)+\n  geom_smooth(data = sumstats, aes(x= Wave.Number, y = meanSpeed))+\n  facet_grid(tournament~tower)\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(allfiles, aes(x= Wave.Number, y = Turn.Rate.Trait))+\n  geom_jitter(data = allfiles, aes(x=Wave.Number, y = Turn.Rate.Trait),\n              alpha = 0.1)+\n  geom_smooth(data = sumstats, aes(x= Wave.Number, y = meanTurn))+\n  facet_grid(tournament~tower)\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\nChange in the Turn.Rate.Trait value over time.\n\n\n\n\n\n\n\nggplot(allfiles, aes(x= Wave.Number, y = Slime.Optimal.Distance.Trait))+\n  geom_jitter(data = allfiles, aes(x=Wave.Number, y = Slime.Optimal.Distance.Trait),\n              alpha = 0.1)+\n  geom_smooth(data = sumstats, aes(x= Wave.Number, y = meanPersonal))+\n  facet_grid(tournament~tower)\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\nChange in the Slime.Distance.Trait value over time.\n\n\n\n\n\n\n\nggplot(allfiles, aes(x= Wave.Number, y = Tower.Attraction.Trait))+\n  geom_jitter(data = allfiles, aes(x=Wave.Number, y = Tower.Attraction.Trait),\n              alpha = 0.1)+\n  geom_smooth(data = sumstats, aes(x= Wave.Number, y = meanTower))+\n  facet_grid(tournament~tower)\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\nChange in the Tower.Distance.Trait value over time."
  },
  {
    "objectID": "posts/preliminary/index.html#visualize-basic-type-patterns",
    "href": "posts/preliminary/index.html#visualize-basic-type-patterns",
    "title": "Preliminary Testing August 9",
    "section": "Visualize Basic Type Patterns",
    "text": "Visualize Basic Type Patterns\n\nMain Slime TypeSecondary Slime Type\n\n\n\n# Assuming your data frame is named 'allfiles'\n# Step 1: Summarize the data to get counts of Main.Type for each Wave.Number\nsummary_types &lt;- allfiles %&gt;%\n  group_by(Wave.Number, Main.Type, file, tournament, tower) %&gt;%\n  summarise(count = n()) %&gt;%\n  ungroup()\n\n`summarise()` has grouped output by 'Wave.Number', 'Main.Type', 'file',\n'tournament'. You can override using the `.groups` argument.\n\n# Step 2: Create the stacked bar chart\nggplot(summary_types, aes(x = factor(Wave.Number), y = count, fill = Main.Type)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Stacked Bar Chart of Main.Type Across Wave.Numbers\",\n       x = \"Wave Number\",\n       y = \"Count\",\n       fill = \"Main Type\") +\n  theme_minimal()+\n  facet_grid(tournament~tower)\n\n\n\n\nChange in the frequency of Main Type over time.\n\n\n\n\n\n\n\n# Assuming your data frame is named 'allfiles'\n# Step 1: Summarize the data to get counts of Main.Type for each Wave.Number\nsummary_types &lt;- allfiles %&gt;%\n  group_by(Wave.Number, Secondary.Type, file, tournament, tower) %&gt;%\n  summarise(count = n()) %&gt;%\n  ungroup()\n\n`summarise()` has grouped output by 'Wave.Number', 'Secondary.Type', 'file',\n'tournament'. You can override using the `.groups` argument.\n\n# Step 2: Create the stacked bar chart\nggplot(summary_types, aes(x = factor(Wave.Number), y = count, fill = Secondary.Type)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Stacked Bar Chart of Secondary.Type Across Wave.Numbers\",\n       x = \"Wave Number\",\n       y = \"Count\",\n       fill = \"Main Type\") +\n  theme_minimal()+\n  facet_grid(tournament~tower)\n\n\n\n\nChange in the frequency of Secondary Type over time."
  },
  {
    "objectID": "posts/preliminary/index.html#fitness-analysis",
    "href": "posts/preliminary/index.html#fitness-analysis",
    "title": "Preliminary Testing August 9",
    "section": "Fitness Analysis",
    "text": "Fitness Analysis\n\nfit_ranked &lt;- allfiles %&gt;%\n  group_by(file, Wave.Number) %&gt;%\n  mutate(fitrank = rank(Sheep.Distance.Fitness, ties.method = \"min\")) %&gt;%\n  mutate(fitscale = scale(Sheep.Distance.Fitness))%&gt;%\n  ungroup()\n\n\nRaw FitnessLog Fitness\n\n\n\nggplot(allfiles, aes(x = as.factor(Wave.Number), y = Sheep.Distance.Fitness, color = offspring_count, alpha = 0.01)) + \n  geom_jitter() +\n  theme(legend.position = \"none\")+\n  facet_grid(tournament~tower)\n\n\n\n\n\n\n\n\n\n\n\nggplot(allfiles, aes(x = as.factor(Wave.Number), y = log10(Sheep.Distance.Fitness), color = offspring_count, alpha = 0.01)) + \n  geom_jitter() +\n  theme(legend.position = \"none\")+\n  facet_grid(tournament~tower)\n\n\n\n\n\n\n\n\n\n\n\nfitness &lt;- ggplot(fit_ranked%&gt;% filter(Wave.Number &lt; max(Wave.Number)), aes(x = Sheep.Distance.Fitness, y = offspring_count))+ geom_point(aes(color = Speed.Trait))+ geom_smooth(method = “lm”)+ facet_grid(Wave.Number~file)\nggsave(fitness, file = “fitness.png”, height = 12, width =4)\nfitnessrank &lt;- ggplot(fit_ranked%&gt;% filter(Wave.Number &lt; max(Wave.Number)), aes(x = fitrank, y = offspring_count))+ geom_point(aes(color = Speed.Trait))+ geom_smooth(method = “lm”)+ facet_grid(Wave.Number~file)\nggsave(fitnessrank, file = “fitnessrank.png”, height = 12, width =4)\nspeed &lt;- ggplot(fit_ranked%&gt;% filter(Wave.Number &lt; max(Wave.Number)), aes(x = Speed.Trait, y = offspring_count))+ geom_point(aes(color = Main.Type))+ geom_smooth(method = “lm”)+ facet_grid(Wave.Number~file)\nggsave(speed, file = “speed.png”, height = 12, width =4)\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(fit_ranked, aes(x = Speed.Trait)) +\n  geom_histogram(data = subset(fit_ranked, Wave.Number == 8), \n                 aes(y = ..density..), \n                 fill = \"lightgray\", \n                 color = \"black\", \n                 alpha = 0.7) +\n  geom_density(data = subset(fit_ranked, Wave.Number %in% 0:8), \n               aes(color = factor(Wave.Number))) +\n  scale_color_discrete(name = \"Wave Number\") +\n  labs(title = \"Speed Trait Distribution\",\n       x = \"Speed Trait\",\n       y = \"Density\") +\n  theme_minimal()+\n  facet_grid(~file)\n\nWarning: The dot-dot notation (`..density..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(density)` instead.\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nggplot(fit_ranked, aes(x = Speed.Trait)) +\n  geom_histogram( aes(y = ..density..), \n                 fill = \"lightgray\", \n                 color = \"black\", \n                 alpha = 0.7) +\n\n  labs(title = \"Speed Trait Distribution\",\n       x = \"Speed Trait\",\n       y = \"Density\") +\n  theme_minimal()+\n  facet_grid(Wave.Number~file)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nggplot(fit_ranked, aes(x = Sheep.Distance.Fitness)) +\n  geom_histogram(data = subset(fit_ranked, Wave.Number == 4), \n                 aes(y = ..density..), \n                 fill = \"lightgray\", \n                 color = \"black\", \n                 alpha = 0.7) +\n  geom_density(data = subset(fit_ranked, Wave.Number %in% 0:3), \n               aes(color = factor(Wave.Number))) +\n  scale_color_discrete(name = \"Wave Number\") +\n  labs(title = \"Offfspring Distribution\",\n       x = \"Speed Trait\",\n       y = \"Density\") +\n  theme_minimal()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n:::\n\nlibrary(brms)\n\nformula &lt;- \"offspring_count ~ speedscale + file + Main.Type + (1|Wave.Number)\"\n\n# gaussianmodel &lt;- brm(\n#   formula = formula,\n#   data = fit_ranked,\n#   family = gaussian(),\n#   prior = c(\n#     prior(normal(0, 1), class = b),\n#     prior(cauchy(0, 2), class = sd)\n#   ),\n#   chains = 4,\n#   iter = 2000,\n#   warmup = 1000\n# )\n\nzeromodel &lt;- brm(\n  formula = formula,\n  data = fit_ranked,\n  family = zero_inflated_negbinomial(),\n  prior = c(\n    prior(normal(0, 1), class = b),\n    prior(cauchy(0, 2), class = sd)\n  ),\n  chains = 4,\n  iter = 2000,\n  warmup = 1000\n)\n\n\n# summary(gaussianmodel)\n# posterior &lt;- as.data.frame(gaussianmodel)\n# hist(posterior$b_fitscale, main=\"Posterior Distribution of Selection Gradient\", xlab=\"Selection Gradient\")\n\n\nsummary(zeromodel)\nposterior &lt;- as.data.frame(zeromodel)\nhist(posterior$b_speedscale, main=\"Posterior Distribution of Selection Gradient\", xlab=\"Selection Gradient\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ShepHerd",
    "section": "",
    "text": "Does Proportional Tournament Selection Work?\n\n\n\n\n\n\nTournament Selection\n\n\nTesting\n\n\n\n\n\n\n\n\n\nAug 11, 2024\n\n\nBarrie Robison\n\n\n\n\n\n\n\n\n\n\n\n\nPotential Data Visualizations\n\n\n\n\n\n\nEducation\n\n\nData Science\n\n\nData Visualization\n\n\n\n\n\n\n\n\n\nAug 11, 2024\n\n\nBarrie Robison\n\n\n\n\n\n\n\n\n\n\n\n\nPreliminary Testing August 9\n\n\n\n\n\n\nTournament Size\n\n\nTesting\n\n\nBlaster\n\n\nIce\n\n\n\n\n\n\n\n\n\nAug 9, 2024\n\n\nBarrie Robison\n\n\n\n\n\n\nNo matching items"
  }
]