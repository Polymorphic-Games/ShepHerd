{
  "hash": "08923a0713adf0dfdc4ed50ce820eef9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Preliminary Testing August 9\"\nauthor: \"Barrie Robison\"\ndate: \"2024-08-09\"\ncategories: [Tournament Size, Testing, Blaster, Ice]\nimage: \"image.jpg\"\n---\n\n\n\n## Shep.Herd Evolutionary Model Analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nsafe_read_csv <- function(file) {\n  tryCatch(\n    list(result = read_csv(file, show_col_types = FALSE) %>%\n           rename_with(~ str_replace_all(., \" \", \".\")),\n         error = NULL),\n    error = function(e) list(result = NULL, error = e)\n  )\n}\n\n# Read all CSV files and combine them into a single dataframe\nallfiles <- list.files(pattern = \"*.csv\", full.names = TRUE) %>%\n  map_df(function(file) {\n    result <- safe_read_csv(file)\n    if (is.null(result$error)) {\n      # Extract characters 6 through 9 from the file name\n      layout_value <- substr(basename(file), 4, 7)\n      tournament<- substr(basename(file), 1, 3)\n      tower <- substr(basename(file), 8,10)\n      \n      # Combine the data with file and layout columns\n      result$result %>%\n        mutate(file = file, layout = layout_value,\n               tournament = tournament,\n               tower = tower)\n    } else {\n      warning(paste(\"Error reading file:\", file, \"\\n\", result$error))\n      return(NULL)\n    }\n  })\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNew names:\nNew names:\nNew names:\nNew names:\n• `` -> `...24`\n```\n\n\n:::\n\n```{.r .cell-code}\n# Check if allfiles is empty\nif (nrow(allfiles) == 0) {\n  stop(\"No data was successfully read from the CSV files.\")\n}\n\n# Process the combined dataframe\nallfiles <- allfiles %>%\n  mutate(\n    Wave.Number = as.numeric(Wave.Number),\n    Unique.Slime.ID = paste(Wave.Number, Slime.ID, sep = \".\"),\n    Unique.Parent.One = paste(Wave.Number - 1, Parent.One, sep = \".\"),\n    Unique.Parent.Two = paste(Wave.Number - 1, Parent.Two, sep = \".\")\n  ) %>%\n  pivot_longer(\n    cols = c(Unique.Parent.One, Unique.Parent.Two),\n    names_to = \"parent_type\",\n    values_to = \"parent_id\"\n  ) %>%\n  group_by(parent_id) %>%\n  mutate(offspring_count = n()) %>%\n  ungroup() %>%\n  filter(parent_id != \"-1.N/A\") %>%\n  select(-parent_type) %>%\n  distinct()\n```\n:::\n\n\n## Visualize Basic Trait Patterns {.tabset}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsumstats <- allfiles %>%\n  group_by(file, Wave.Number, tournament, tower)%>%\n  summarise(meanSpeed = mean(Speed.Trait),\n            meanTower = mean(Tower.Attraction.Trait),\n            meanTurn = mean(Turn.Rate.Trait),\n            meanPersonal = mean(Slime.Optimal.Distance.Trait),\n            Main.Blaster = sum(Main.Type == \"Blaster\"),\n            Main.Ice = sum(Main.Type == \"Ice\"),\n            Sec.Blaster = sum(Secondary.Type == \"Blaster\"),\n            Sec.Ice = sum(Secondary.Type == \"Ice\"))%>%\n  ungroup()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'file', 'Wave.Number', 'tournament'. You\ncan override using the `.groups` argument.\n```\n\n\n:::\n:::\n\n\n::: {.panel-tabset}\n\n## Speed\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#| fig-cap: \"Change in the Speed.Trait value over time.\"\nggplot(allfiles, aes(x= Wave.Number, y = Speed.Trait))+\n  geom_jitter(data = allfiles, aes(x=Wave.Number, y = Speed.Trait),\n              alpha = 0.1)+\n  geom_smooth(data = sumstats, aes(x= Wave.Number, y = meanSpeed))+\n  facet_grid(tournament~tower)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## Turn Rate\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(allfiles, aes(x= Wave.Number, y = Turn.Rate.Trait))+\n  geom_jitter(data = allfiles, aes(x=Wave.Number, y = Turn.Rate.Trait),\n              alpha = 0.1)+\n  geom_smooth(data = sumstats, aes(x= Wave.Number, y = meanTurn))+\n  facet_grid(tournament~tower)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![Change in the Turn.Rate.Trait value over time.](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n## Personal Space\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(allfiles, aes(x= Wave.Number, y = Slime.Optimal.Distance.Trait))+\n  geom_jitter(data = allfiles, aes(x=Wave.Number, y = Slime.Optimal.Distance.Trait),\n              alpha = 0.1)+\n  geom_smooth(data = sumstats, aes(x= Wave.Number, y = meanPersonal))+\n  facet_grid(tournament~tower)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![Change in the Slime.Distance.Trait value over time.](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n## Tower Avoidance\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(allfiles, aes(x= Wave.Number, y = Tower.Attraction.Trait))+\n  geom_jitter(data = allfiles, aes(x=Wave.Number, y = Tower.Attraction.Trait),\n              alpha = 0.1)+\n  geom_smooth(data = sumstats, aes(x= Wave.Number, y = meanTower))+\n  facet_grid(tournament~tower)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![Change in the Tower.Distance.Trait value over time.](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n:::\n\n## Visualize Basic Type Patterns \n\n\n::: {.panel-tabset}\n\n## Main Slime Type\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Assuming your data frame is named 'allfiles'\n# Step 1: Summarize the data to get counts of Main.Type for each Wave.Number\nsummary_types <- allfiles %>%\n  group_by(Wave.Number, Main.Type, file, tournament, tower) %>%\n  summarise(count = n()) %>%\n  ungroup()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'Wave.Number', 'Main.Type', 'file',\n'tournament'. You can override using the `.groups` argument.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Step 2: Create the stacked bar chart\nggplot(summary_types, aes(x = factor(Wave.Number), y = count, fill = Main.Type)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Stacked Bar Chart of Main.Type Across Wave.Numbers\",\n       x = \"Wave Number\",\n       y = \"Count\",\n       fill = \"Main Type\") +\n  theme_minimal()+\n  facet_grid(tournament~tower)\n```\n\n::: {.cell-output-display}\n![Change in the frequency of Main Type over time.](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## Secondary Slime Type\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Assuming your data frame is named 'allfiles'\n# Step 1: Summarize the data to get counts of Main.Type for each Wave.Number\nsummary_types <- allfiles %>%\n  group_by(Wave.Number, Secondary.Type, file, tournament, tower) %>%\n  summarise(count = n()) %>%\n  ungroup()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'Wave.Number', 'Secondary.Type', 'file',\n'tournament'. You can override using the `.groups` argument.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Step 2: Create the stacked bar chart\nggplot(summary_types, aes(x = factor(Wave.Number), y = count, fill = Secondary.Type)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Stacked Bar Chart of Secondary.Type Across Wave.Numbers\",\n       x = \"Wave Number\",\n       y = \"Count\",\n       fill = \"Main Type\") +\n  theme_minimal()+\n  facet_grid(tournament~tower)\n```\n\n::: {.cell-output-display}\n![Change in the frequency of Secondary Type over time.](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n:::\n\n\n## Fitness Analysis\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_ranked <- allfiles %>%\n  group_by(file, Wave.Number) %>%\n  mutate(fitrank = rank(Sheep.Distance.Fitness, ties.method = \"min\")) %>%\n  mutate(fitscale = scale(Sheep.Distance.Fitness))%>%\n  ungroup()\n```\n:::\n\n\n::: {.panel-tabset}\n\n## Raw Fitness\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(allfiles, aes(x = as.factor(Wave.Number), y = Sheep.Distance.Fitness, color = offspring_count, alpha = 0.01)) + \n  geom_jitter() +\n  theme(legend.position = \"none\")+\n  facet_grid(tournament~tower)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n## Log Fitness\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(allfiles, aes(x = as.factor(Wave.Number), y = log10(Sheep.Distance.Fitness), color = offspring_count, alpha = 0.01)) + \n  geom_jitter() +\n  theme(legend.position = \"none\")+\n  facet_grid(tournament~tower)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n:::\nfitness <- ggplot(fit_ranked%>%\n         filter(Wave.Number < max(Wave.Number)), \n       aes(x = Sheep.Distance.Fitness, y = offspring_count))+\n  geom_point(aes(color = Speed.Trait))+\n  geom_smooth(method = \"lm\")+\n  facet_grid(Wave.Number~file)\n\n\nggsave(fitness, file = \"fitness.png\", height = 12, width =4)\n\nfitnessrank <- ggplot(fit_ranked%>%\n         filter(Wave.Number < max(Wave.Number)), \n       aes(x = fitrank, y = offspring_count))+\n  geom_point(aes(color = Speed.Trait))+\n  geom_smooth(method = \"lm\")+\n  facet_grid(Wave.Number~file)\n\n\nggsave(fitnessrank, file = \"fitnessrank.png\", height = 12, width =4)\n\nspeed <- ggplot(fit_ranked%>%\n         filter(Wave.Number < max(Wave.Number)),\n       aes(x = Speed.Trait, y = offspring_count))+\n  geom_point(aes(color = Main.Type))+\n  geom_smooth(method = \"lm\")+\n  facet_grid(Wave.Number~file)\n\n\nggsave(speed, file = \"speed.png\", height = 12, width =4)\n\n```\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(fit_ranked, aes(x = Speed.Trait)) +\n  geom_histogram(data = subset(fit_ranked, Wave.Number == 8), \n                 aes(y = ..density..), \n                 fill = \"lightgray\", \n                 color = \"black\", \n                 alpha = 0.7) +\n  geom_density(data = subset(fit_ranked, Wave.Number %in% 0:8), \n               aes(color = factor(Wave.Number))) +\n  scale_color_discrete(name = \"Wave Number\") +\n  labs(title = \"Speed Trait Distribution\",\n       x = \"Speed Trait\",\n       y = \"Density\") +\n  theme_minimal()+\n  facet_grid(~file)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: The dot-dot notation (`..density..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(density)` instead.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(fit_ranked, aes(x = Speed.Trait)) +\n  geom_histogram( aes(y = ..density..), \n                 fill = \"lightgray\", \n                 color = \"black\", \n                 alpha = 0.7) +\n\n  labs(title = \"Speed Trait Distribution\",\n       x = \"Speed Trait\",\n       y = \"Density\") +\n  theme_minimal()+\n  facet_grid(Wave.Number~file)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-2.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(fit_ranked, aes(x = Sheep.Distance.Fitness)) +\n  geom_histogram(data = subset(fit_ranked, Wave.Number == 4), \n                 aes(y = ..density..), \n                 fill = \"lightgray\", \n                 color = \"black\", \n                 alpha = 0.7) +\n  geom_density(data = subset(fit_ranked, Wave.Number %in% 0:3), \n               aes(color = factor(Wave.Number))) +\n  scale_color_discrete(name = \"Wave Number\") +\n  labs(title = \"Offfspring Distribution\",\n       x = \"Speed Trait\",\n       y = \"Density\") +\n  theme_minimal()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-3.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(brms)\n\nformula <- \"offspring_count ~ speedscale + file + Main.Type + (1|Wave.Number)\"\n\n# gaussianmodel <- brm(\n#   formula = formula,\n#   data = fit_ranked,\n#   family = gaussian(),\n#   prior = c(\n#     prior(normal(0, 1), class = b),\n#     prior(cauchy(0, 2), class = sd)\n#   ),\n#   chains = 4,\n#   iter = 2000,\n#   warmup = 1000\n# )\n\nzeromodel <- brm(\n  formula = formula,\n  data = fit_ranked,\n  family = zero_inflated_negbinomial(),\n  prior = c(\n    prior(normal(0, 1), class = b),\n    prior(cauchy(0, 2), class = sd)\n  ),\n  chains = 4,\n  iter = 2000,\n  warmup = 1000\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# summary(gaussianmodel)\n# posterior <- as.data.frame(gaussianmodel)\n# hist(posterior$b_fitscale, main=\"Posterior Distribution of Selection Gradient\", xlab=\"Selection Gradient\")\n\n\nsummary(zeromodel)\nposterior <- as.data.frame(zeromodel)\nhist(posterior$b_speedscale, main=\"Posterior Distribution of Selection Gradient\", xlab=\"Selection Gradient\")\n```\n:::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}